regfit.full <- regsubsets(Salary~.,data=Hitters)
summary(regfit.full)
regfit.full <- regsubsets(Salary~.,data=Hitters,nvmax = 19)
summary(regfit.full)
reg.summary<- summary(regfit.full)
names(reg.summary)
plot(reg.summary$cp,xlab = "Num of variables",ylab = ="Cp")
plot(reg.summary$cp,xlab = "Num of variables",ylab ="Cp")
##minimum for 10
points(10,reg.summary$cp[10],pch=20,col="red")
plot(regfit.full,scale = "Cp")
coef(regfit.full,10)
plot(age,wage,col="darkgrey")
prob.bands=exp(se.bands)/(1+exp(se.bands))
matplot(age.grid,prob.bands,col = "blue",lwd=c(2,1,1),lty = c(1,2,2),type="l",ylim=c(0,.1))
points(jitter(age),I(Wage>250)/10,pch="|",cex=0.5)
fit = lm(wage~poly(age,4),data = Wage)
summary(fit)
require(ISLR)
attach(Wage)
fit = lm(wage~poly(age,4),data = Wage)
summary(fit)
agelims=range(age)
##default increment value for seq function is 1
age.grid = seq(from=agelims[1],to=agelims[2])
#we use newdata=list command as we need named X matrix for either list or DF
pred <- predict(fit,newdata = list(age=age.grid),se.fit =T)
se.bands=cbind(pred$fit+2*pred$se.fit,pred$fit-2*pred$se.fit)
plot(age,wage,col="darkgrey")
lines(age.grid,pred$fit,lwd=2,col="blue")
matlines(age.grid,se.bands,col="blue",lty = 2)
##notice we use I(the identity function in R) as using '^' operator has some special meaning in R
fita = lm(wage~age+I(age^2)+I(age^3)+I(age^4),data=Wage)
summary(fita)
summary(fit)
##notice that p values of both these fits differ as we use different basis function, but the fitted values remain same
plot(fitted(fit),fitted(fita))
summary(fit)
fita = lm(wage~education,data=Wage)
fitb= lm(wage~education+age,data=Wage)
fitc=lm(wage~education+poly(age,2),data=Wage)
fitd=lm(wage~education+poly(age,3),data = Wage)
anova(fita,fitb,fitc,fitd)
plot(age,wage,col="darkgrey")
##we can see that there is band of wages above and below 250
fit=glm(I(wage>250)~poly(age,3),data = Wage,family = "binomial")
summary(fit)
##The predictors are not orthogonal anymore even though we used poly() function which generates orthogonal basis, as glm uses weights for each predictors and orthogonality is somewhat lost
preds=predict(fit,list(age=age.grid),se=T)
se.bands=preds$fit+cbind(fit=0,lower=-2*preds$se,upper=2*preds$se)
se.bands[1:5,]
prob.bands=exp(se.bands)/(1+exp(se.bands))
matplot(age.grid,prob.bands,col = "blue",lwd=c(2,1,1),lty = c(1,2,2),type="l",ylim=c(0,.1))
points(jitter(age),I(Wage>250)/10,pch="|",cex=0.5)
lenght(jitter$age)
length(jitter$age)
points(jitter(age),I(Wage>250)/10,pch="|",cex=.5)
?Wage
str(Wage)
points(jitter(age),I(wage>250)/10,pch="|",cex=.5)
length(jitter$age)
require(splines)
require(splines)
fit=lm(wage~bs(age,knots=c(25,40,60)),data = Wage)
plot(age,wage,col="darkgrey")
lines(age.grid,predict(fit,list(age=age.grid)),col="darkgreen",lwd=2)
abline(v=c(25,40,60),lty=2,col="darkgreen")
bs(age.grid)
summary(bs(age.grid))
?bs
fit<- smooth.spline(age,wage,df=16)
lines(fit,col="red",lwd=2)
fit1<-smooth.spline(age,wage,cv=T)
lines(fit1,col="blue",lwd=4)
summary(fit1)
fit1
fit2
fit
fitPast=lm(wage~bs(age,knots=c(25,40,60)),data = Wage)
fitPast
summary(fitPast)
fitPast
require(gam)
install.packages("gam")
require(gam)
x<-1
x
priimt[x]
print(x)
x = 1:20
x
tempFunction <- function(a,b) {
return (a+b);
}
tempFunction(2,7)
tempFunction <- function(a,b) {
(a+b);
}
tempFunction(2,7)
tempFunction <- function(x) {
x[x>10]
}
tempFunction(1:20)
tempFunction <- function(x,n=10) {
x[x>n]
}
tempFunction(1:20)
tempFunction(1:20,12)
search()
print(10)
}
c<- function() {
print(10)
}
c
c()
search()
c
c <- 3
c
c()
c <- function(){
print("fuck you")
}
c
c()
View(c)
View(c)
View(c)
View(c)
c <- 3
install.packages('curl')
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
linrary(RMySQL)
install.packages("RMySQL")
install.packages("MySQL")
sample(1:5)
sample(1:5)
set.seed(12345)
X <- data.frame("var1"=sample(1:5),"var2"=sample(6:10),"var3"=sample(11:15))
X
X <- X[sample(1:5),];
X
X$var2[c(1,3)] = NA
X
X[1,]
X[,1]
X[[,1]]
X[[,1]]
X[,"var1"]
X[1:2,"var2"]
X[(X$var1 <= 3 & X$var3 > 11),]
X[(X$var1 <= 3 | X$var3 > 15),]
X[X$var2 > 8,]
X[X$var1 > 8,]
X[X$var1 < 8,]
X[which(X$var2 > 8),]
X[X$var2 > 8,]
X[which(X$var2 > 8),]
?which
which(X$var2 >8)
which(X$var1 <8)
sort(X$var1)
sort(X$var1,decreasing = T)
X[order(X$var1),]
X[order(X$var3),]
order(x$var3)
order(X$var3)
X[order(X$var3,X$var1),]
X[order(X$var3,X$var2,na.last = T),]
X[order(X$var2,X$var3,na.last = T),]
library(plyr)
arrange
arrange(X,var1)
arrange(X,desc(var1))
X$var4 = X$var1
X
X = cbind(X,var4)
X = cbind(X,X$var4)
X
var5 = X$var4
X = cbind(X,var5)
X
X$`X$var4` = NULL
X
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/restaurants.csv",method="curl")
restData <- read.csv("./data/restaurants.csv")
head(restData)
summary(restData)
table(restData$zipCode)
str(restData)
quantile(restData$councilDistrict)
table(restData$councilDistrict,restData$zipCode)
sum(is.na(restData))
sum(is.na(restData$councilDistrict))
colSums(is.na(restData))
complete.cases(restData)
sum(complete.cases(restData))
nrow(restData)-sum(complete.cases(restData))
table(restData$zipCode %in% c("21212","21213"))
getwd()
gwtwd()
getwd()
?sample()
x = sample(0:2,100,prob = c(1/3,1/3,1/3))
x = sample(0:2,100,prob = c(1/3,1/3,1/3),replace = T)
sum(x==3)
sum(x==2)
sum(x==1)
sum(x==0)
x = sample(0:2,99,prob = c(0.33,0.33,0.33),replace = T)
sum(x==2)
sum(x==1)
sum(x==0)
x = sample(0:2,99,prob = c(1,1,1),replace = T)
sum(x==0)
sum(x==1)
sum(x==2)
rep(1:2,33)
x=rep(0:2,33)
sum(x==1)
library(dplyr)
install.packages("dplyr")
library(dplyr)
library(dplyr)
suppressMessages(library(dplyr))
library(hflights)
install.packages("hflights")
library(hflights)
data("hflights")
data(hflights)
?data
head(hflights)
flights = tbl_df(hflights)
flights
print(flights,20)
data.frame(head(flights))
print(flights,20)
print(flights,20)
print(flights,n = 20)
filter(flights,Month==1,DayofMonth==1)
filter(flights,UniqueCarrier=="AA"|UniqueCarrier == "AS")
filter(flights,UniqueCarrier=="AA"|UniqueCarrier == "UA")
filter(flights,UniqueCarrier=="AA"|UniqueCarrier == "AS")
filter(flights,UniqueCarrier %in% C("AA","AS"))
filter(flights,UniqueCarrier %in% c("AA","AS"))
select(flights,DepTime,ArrTime,FlightNum)
select(flights,Year:DayofMonth,contains("Taxi"),contains("Delay"))
select(flights,Year:DayofMonth,contains("taxi"),contains("Delay"))
my_db <- src_sqlite("my_db.sqlite3")
install.packages("RSQLite")
my_db <- src_sqlite("my_db.sqlite3")
library(RSQLite)
my_db <- src_sqlite("my_db.sqlite3")
library(RSQLite)
my_db <- src_sqlite("my_db.sqlite3")
library(RSQLite)
my_db <- src_sqlite("my_db.sqlite3")
install.packages("DBI")
library(DBI)
my_db <- src_sqlite("my_db.sqlite3")
install.packages("RSQLite.extfuns")
flights %>% select(UniqueCarrier,DepDeplay)%>%filter(flights,DepDeplay>60)
flights %>% select(UniqueCarrier,DepDeplay) %>% filter(flights,DepDeplay>60)
flights %>% select(UniqueCarrier,DepDeplay) %>% filter(flights,DepDeplay>60)
flights %>% select(UniqueCarrier,DepDeplay) %>% filter(DepDeplay>60)
library(dplyr)
flights %>% select(UniqueCarrier,DepDeplay) %>% filter(DepDeplay>60)
flights
flights %>% select(UniqueCarrier,DepDelay) %>% filter(DepDeplay>60)
flights %>% select(UniqueCarrier,DepDelay) %>% filter(DepDelay>60)
sqrt(sum((x1-x2)^2))
X1 = 1:5; X2 = 2:6 ;
x1 = 1:5; x2 = 2:6 ;
sqrt(sum((x1-x2)^2))
(x1-x2)^2 %>% sum() %>% sqrt()
flights %>% select(flights,UniqueCarrier,DepDelay) %>% filter(DepDelay>60)
?filter
flights %>% select(UniqueCarrier,DepDelay) %>% filter(flights,DepDelay>60)
flights %>% select(UniqueCarrier,DepDelay) %>% arrange(DepDelay)
flights %>% mutate(Speed = Distance/AirTime*60)
flights
flights %>% mutate(Speed = Distance/AirTime*60)
flights = flights %>% mutate(Speed = Distance/AirTime*60)
head(flights)
flights %>% group_by(Dest) %>% summarise(avg_delay = mean(ArrDelay,na.rm = T))
flights %>% group_by(UniqueCarrier) %>% summarise_each(funs = mean,Cancelled,Diverted)
flights %>% group_by(UniqueCarrier) %>% summarise_each(funs(mean),Cancelled,Diverted)
flights %>% group_by(UniqueCarrier,Dest) %>% summarise_each(funs(mean),Cancelled,Diverted)
flights %>%  group_by(UniqueCarrier) %>% summarise_each(funs(min(.,na.rm=T),max(.,na.rm=t)),matches("Delay"))
flights %>% group_by(Month,DayofMonth) %>% summarise(flight_count = n()) %>% arrange(desc(flight_count))
flights %>% group_by(Month,DayofMonth) %>% summarise(flight_count = n_distinct()) %>% arrange(desc(flight_count))
flights %>% group_by(Month,DayofMonth) %>% summarise(flight_count = n_distinct(Dest)) %>% arrange(desc(flight_count))
lights %>% group_by(Month,DayofMonth) %>% summarise(flight_count = n()) %>% arrange(desc(flight_count))
flights %>% group_by(Month,DayofMonth) %>% summarise(flight_count = n()) %>% arrange(desc(flight_count))
flights %>% group_by(Month,DayofMonth) %>% tally(sort = T)
flights %>% group_by(Dest) %>% summarise(flights = n(),distinct = n_distinct(TailNum))
flights%>%group_by(Dest)%>%select(Cancelled)%>%table()%>%head()
flights %>% group_by(UniqueCarrier) %>% select(contains(Delay))
flights %>% group_by(UniqueCarrier) %>% select(contains("Delay)"")
flights %>% group_by(UniqueCarrier) %>% select(contains("Delay)")
```
flights %>% group_by(UniqueCarrier) %>% select(contains("Delay"))
flights %>% group_by(UniqueCarrier) %>% select(contains("Delay"),Year) %>% arrange
flights %>% group_by(UniqueCarrier) %>% select(contains("Delay"),Year,DayofMonth) %>% arrange
View(flights)
flights %>% group_by(year) %>% table()
flights %>% group_by(Year) %>% table()
flights %>% group_by(Year) %>% tally()
flights %>% group_by(UniqueCarrier) %>% select(contains("Delay"),Year,DayofMonth,Month) %>% arrange(desc(DepDelay))
flights %>% head()
getwd()
version
library(dplyr)
train %>% count(Survived,Pclass)
corrplot(train)
plot(train)
plot(cor(train))
getwd()
setwd("./mywork/kaggle/Titanic/")
train = read.csv(file = "train.csv")
head(train)
names(train)
length(levels(train$Cabin))
rm(list = ls())
length(levels(train$Cabin))
train = read.csv(file = "train.csv")
length(levels(train$Cabin))
str(train)
apply(train, 2, function(x){sum(is.na(x))})
summary(train$Pclass)
levels(as.factor(train$Pclass))
train$Pclass = as.factor(train$Pclass)
train$Survived = as.factor(train$Survived)
summary(train$Survived)
train %>% count(Survived,Pclass)
train %>% count(Survived,Pclass)
plot(cor(train))
length(levels(train$Cabin))
cor(train)
str(train)
plot(Survived~PassengerID,data = train)
plot(Survived~PassengerId,data = train)
?abline
plot(Survived~Pclass,data = train)
plot(Survived~Sex,data = train)
plot(Survived~Sex,data = train,col=Survived)
library(ggplot2)
pairs(train)
boxplot(Survived)
boxplot(train$Survived)
boxplot(train$Fare)
?abline
plot(Fare~Pclass)
plot(Fare~Pclass,train)
train %>% filter(Embarked == "")
plot(Survived~Pclass,data = train)
plot(Survived~Sex,data = train,col=Survived)
train %>% count(Sex)
train %>% filter(Sex = "Female") + geom_boxplot()
train %>% filter(Sex == "Female") + geom_boxplot()
train %>% filter(Sex == "Female") %>% geom_bar()
train %>% filter(Sex == "Female") %>% summarise( percentage = Survived/nrows(train)*100)
suppressMessages(library(dplyr))
library(hflights)
data(hflights)
head(hflights)
suppressMessages(library(dplyr))
library(hflights)
data(hflights)
head(hflights)
flights = tbl_df(hflights)
flights
# specify number of rows
print(flights,n = 20)
# convert to a normal data frame to see all the columns
data.frame(head(flights))
train %>% group_by(Survived,Sex) %>% tally(sort = T)
train %>% group_by(Survived,Sex) %>% tally()
str(train)
train %>% filter(Age = is.na(Age))
detroit = c(
73,
75,
70,
72,
71,
72,
72,
72,
75,
71,
74,
71,
74,
69,
71,
73,
76,
76,
75,
72,
75,
74,
74,
70,
75,
72,
72,
74)
detroit = c(
73,
75,
70,
72,
71,
72,
72,
72,
75,
71,
74,
71,
74,
69,
71,
73,
76,
76,
75,
72,
75,
74,
74,
70,
75,
72,
72,
74)
mean(detroit)
sjs = c(73,
74,
73,
73,
74,
71,
77,
74,
74,
77,
71,
73,
76,
72,
71,
74,
77,
74,
75,
75,
74,
73,
73,
74)
mean(sjs)
mode(detroit)
hist(detroit)
barplot(detroit)
hist(sjs)
barplot(sjs)
hist(sjs)
var(c(1,2,3,4,5,6))
sqrt(var(c(1,2,3,4,5,6)))
mean(c(1,2,3,4,5,6))
x = c(1,2,3,4,5,6)
mean(x)
sqrt((x-mean(x))^2)
sqrt(sum((x-mean(x))^2)
)
sqrt(sum((x-mean(x))^2))
4.1833/5
4.1833/6
sum(x-mean(x)^2)
sum((x-mean(x))^2)
17.5/6
sqrt(2.91667)
rm(list=ls())
getwd()
setwd("~/mywork/kaggle/Titanic/")
train = read.csv(file = "train.csv")
head(train)
install.packages("corrplot")
loadedNamespaces()
load(".RData")
getwd()
setwd()
setwd("~/.")
getwd()
getwd()
setwd("./mywork/kaggle/Titanic/")
getwd()
load(".RData")
setwd("~/.")
load(".RData")
getwd()
setwd("./mywork/kaggle/Titanic/")
load(".RData")
getwd()
temp2 = 1:100000
